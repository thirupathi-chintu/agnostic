---
- name: Create nginx group
  group: name=nginx state=present

- name: Adding nginx user
  user: name=nginx shell=/sbin/nologin group=nginx append=yes home='{{pl_nginx_home_directory}}'

- name: Packages for ubuntu
  apt: name={{item.name}} state={{item.state}}
  with_items:
  - { name: "nginx", state: "absent" }
  - { name: "build-essential", state: "present" }
  - { name: "perl", state: "present" }
  - { name: "libatomic-ops-dev", state: "present" }
  - { name: "libxml2", state: "present" }
  - { name: "libgd-dev", state: "present" }
  - { name: "libxslt-dev", state: "present" }
  - { name: "geoip-database", state: "present" }
  - { name: "geoip-database-extra", state: "present" }
  - { name: "geoipupdate", state: "present" }
  - { name: "zip", state: "present" }
  - { name: "unzip", state: "present" }
  - { name: "libgeoip-dev", state: "present" }
  when: ansible_distribution == "Ubuntu"

- name: Packages for centos
  yum: name={{item.name}} state={{item.state}}
  with_items:
  - { name: "nginx", state: "absent" }
  - { name: "@Development tools", state: "present" }
  - { name: "perl-devel", state: "present" }
  - { name: "perl-ExtUtils-Embed", state: "present" }
  - { name: "libxslt", state: "present" }
  - { name: "libxslt-devel", state: "present" }
  - { name: "libxml2", state: "present" }
  - { name: "libxml2-devel", state: "present" }
  - { name: "gd", state: "present" }
  - { name: "gd-devel", state: "present" }
  - { name: "GeoIP", state: "present" }
  - { name: "GeoIP-devel", state: "present" }
  when: ansible_distribution == "CentOS"

- name: Create a folder for nginx
  file: path='{{item}}' state=directory mode=0755 owner=nginx group=nginx recurse=yes
  with_items:
  - '{{pl_nginx_home_directory}}'
  - '{{pl_nginx_log_directory}}'
  - '{{pl_nginx_home_directory}}/html'
  - '{{pl_nginx_home_directory}}/ssl'

- name: Create a folder for nginx
  file: path='{{item}}' state=directory
  with_items:
  - /etc/nginx/conf.d
  - /etc/nginx/sites-enabled

- name: Copy default html files
  copy: src={{item.src}} dest={{item.dest}} owner=nginx group=nginx
  with_items:
    - { src: 'index.html', dest: '{{pl_nginx_home_directory}}/html/index.html' }
    - { src: 'error-page-404.html', dest: '{{pl_nginx_home_directory}}/html/error-page-404.html' }
    - { src: 'error-page-50x.html', dest: '{{pl_nginx_home_directory}}/html/error-page-50x.html' }
    - { src: 'error-page-403.html', dest: '{{pl_nginx_home_directory}}/html/error-page-403.html' }

- name: Copy default html files
  copy: src={{item.src}} dest={{item.dest}}
  with_items:
    - { src: '{{pl_ssl_crt_file}}', dest: '{{pl_nginx_home_directory}}/ssl/ssl_crt.pem' }
    - { src: '{{pl_ssl_key_file}}', dest: '{{pl_nginx_home_directory}}/ssl/ssl_key.pem' }
    - { src: 'dhparam.pem', dest: '{{pl_nginx_home_directory}}/ssl/dhparam.pem' }

- name: Download archives
  get_url: url='{{item.url}}' dest='{{item.dest}}' validate_certs=no
  with_items:
  - { url: '{{pl_nginx_download_url}}', dest: '{{pl_nginx_directory}}/nginx-{{pl_nginx_version}}.tar.gz' }
  - { url: '{{pl_pcre_download_url}}', dest: '{{pl_nginx_directory}}/pcre-{{pl_pcre_version}}.tar.gz' }
  - { url: '{{pl_zlib_download_url}}', dest: '{{pl_nginx_directory}}/zlib-{{pl_zlib_version}}.tar.gz' }
  - { url: '{{pl_openssl_download_url}}', dest: '{{pl_nginx_directory}}/openssl-{{pl_openssl_version}}.tar.gz' }
  - { url: '{{pl_naxsi_download_url}}', dest: '{{pl_naxsi_directory}}/naxsi-{{pl_naxsi_version}}.zip' }
  - { url: 'http://geolite.maxmind.com/download/geoip/database/GeoLiteCity.dat.gz', dest: '/usr/share/GeoIP/GeoLiteCity.dat.gz' }
  - { url: 'http://geolite.maxmind.com/download/geoip/database/GeoLiteCountry/GeoIP.dat.gz', dest: '/usr/share/GeoIP/GeoIP.dat.gz' }

  tags:
    - nginx-compilation

- name: Extract archives
  unarchive: src='{{item.src}}' dest='{{item.dest}}' remote_src=yes
  with_items:
  - { src: '{{pl_nginx_directory}}/nginx-{{pl_nginx_version}}.tar.gz', dest: '{{pl_nginx_directory}}' }
  - { src: '{{pl_nginx_directory}}/pcre-{{pl_pcre_version}}.tar.gz', dest: '{{pl_nginx_directory}}' }
  - { src: '{{pl_nginx_directory}}/zlib-{{pl_zlib_version}}.tar.gz', dest: '{{pl_nginx_directory}}' }
  - { src: '{{pl_nginx_directory}}/openssl-{{pl_openssl_version}}.tar.gz', dest: '{{pl_nginx_directory}}' }
  - { src: '{{pl_naxsi_directory}}/naxsi-{{pl_naxsi_version}}.zip', dest: '{{pl_naxsi_directory}}' }
  tags:
    - nginx-compilation

- name: Extract GeoIP
  command: gunzip {{item}} -f
  args:
    chdir: /usr/share/GeoIP
  with_items:
  - 'GeoLiteCity.dat.gz'
  - 'GeoIP.dat.gz'

- name: Clear nginx headers
  lineinfile: dest='{{pl_nginx_directory}}/nginx-{{pl_nginx_version}}/src/http/ngx_http_header_filter_module.c' regexp='{{item.regexp}}' line='{{item.line}}' state=present backup=yes backrefs=yes
  with_items:
  - { regexp: 'static u_char ngx_http_server_string', line : 'static u_char ngx_http_server_string[] = "Server: {{pl_nginx_server}}" CRLF;'}
  - { regexp: 'static u_char ngx_http_server_full_string', line : 'static u_char ngx_http_server_full_string[] = "Server: {{pl_nginx_server}}/{{pl_nginx_custom_version}}" CRLF;'}
  - { regexp: 'static u_char ngx_http_server_build_string', line : 'static u_char ngx_http_server_build_string[] = "Server: {{pl_nginx_server}}/{{pl_nginx_custom_version}}" CRLF;'}
  tags:
    - nginx-compilation

- name: Compile nginx for ubuntu
  command: ./configure --prefix=/usr/share/nginx --sbin-path=/usr/sbin/nginx --add-module={{pl_naxsi_directory}}/naxsi-{{pl_naxsi_version}}/naxsi_src/ --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path={{pl_nginx_log_directory}}/error.log --http-log-path={{pl_nginx_home_directory}}/access.log --pid-path={{pl_nginx_home_directory}}/nginx.pid --lock-path={{pl_nginx_home_directory}}/nginx.lock --user=nginx --group=nginx --build={{ansible_distribution}} --http-client-body-temp-path={{pl_nginx_home_directory}}/body --http-fastcgi-temp-path={{pl_nginx_home_directory}}/fastcgi --http-proxy-temp-path={{pl_nginx_home_directory}}/proxy --http-scgi-temp-path={{pl_nginx_home_directory}}/scgi --http-uwsgi-temp-path={{pl_nginx_home_directory}}/uwsgi --with-openssl={{pl_nginx_directory}}/openssl-{{pl_openssl_version}} --with-openssl-opt=enable-ec_nistp_64_gcc_128 --with-openssl-opt=no-nextprotoneg --with-openssl-opt=no-weak-ssl-ciphers --with-openssl-opt=no-ssl3 --with-pcre={{pl_nginx_directory}}/pcre-{{pl_pcre_version}} --with-pcre-jit --with-zlib={{pl_nginx_directory}}/zlib-{{pl_zlib_version}} --with-compat --with-file-aio --with-threads --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_slice_module --with-http_ssl_module --with-http_sub_module --with-http_geoip_module --with-http_stub_status_module --with-http_v2_module --with-http_secure_link_module --with-mail --with-mail_ssl_module --with-stream --with-stream_realip_module --with-stream_ssl_module --with-stream_ssl_preread_module --with-debug
  args:
    chdir: '{{pl_nginx_directory}}/nginx-{{pl_nginx_version}}'
  when: ansible_distribution == "Ubuntu"
  tags:
    - nginx-compilation

- name: Compile nginx for centos
  command: ./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --add-module={{pl_naxsi_directory}}/naxsi-{{pl_naxsi_version}}/naxsi_src/ --modules-path=/usr/lib64/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path={{pl_nginx_log_directory}}/error.log --pid-path={{pl_nginx_home_directory}}/nginx.pid --lock-path={{pl_nginx_home_directory}}/nginx.lock --user=nginx --group=nginx --build={{ansible_distribution}} --builddir=nginx-{{pl_nginx_version}} --with-select_module --with-poll_module --with-threads --with-file-aio --with-http_ssl_module --with-http_v2_module --with-http_realip_module --with-http_addition_module --with-http_xslt_module=dynamic --with-http_image_filter_module=dynamic --with-http_geoip_module=dynamic --with-http_sub_module --with-http_dav_module --with-http_flv_module --with-http_mp4_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_auth_request_module --with-http_random_index_module --with-http_secure_link_module --with-http_degradation_module --with-http_slice_module --with-http_stub_status_module --http-log-path={{pl_nginx_log_directory}}/access.log --http-client-body-temp-path={{pl_nginx_home_directory}}/client_temp --http-proxy-temp-path={{pl_nginx_home_directory}}/proxy_temp --http-fastcgi-temp-path={{pl_nginx_home_directory}}/fastcgi_temp --http-uwsgi-temp-path={{pl_nginx_home_directory}}/uwsgi_temp --http-scgi-temp-path={{pl_nginx_home_directory}}/scgi_temp --with-mail=dynamic --with-mail_ssl_module --with-stream=dynamic --with-stream_ssl_module --with-stream_realip_module --with-stream_geoip_module=dynamic --with-stream_ssl_preread_module --with-compat --with-pcre={{pl_nginx_directory}}/pcre-{{pl_pcre_version}} --with-pcre-jit --with-zlib={{pl_nginx_directory}}/zlib-{{pl_zlib_version}} --with-openssl={{pl_nginx_directory}}/openssl-{{pl_openssl_version}} --with-openssl-opt=no-nextprotoneg --with-debug
  args:
    chdir: '{{pl_nginx_directory}}/nginx-{{pl_nginx_version}}'
  when: ansible_distribution == "CentOS"
  tags:
    - nginx-compilation

- name: Make nginx
  make:
    chdir: '{{pl_nginx_directory}}/nginx-{{pl_nginx_version}}'
    target: install
  tags:
    - nginx-compilation

- name: Create symlinks
  file: src="{{item.src}}" dest="{{item.dest}}" state=link
  with_items:
  - {src: "/usr/lib64/nginx/modules", dest: "/etc/nginx/modules"}
  when: ansible_distribution == "CentOS"

- name: Nginx config files
  template: src='{{item.src}}' dest='{{item.dest}}'
  with_items:
  - { src: 'nginx.conf.j2', dest: '/etc/nginx/nginx.conf'}
  - { src: 'virtualhost.j2', dest: '/etc/nginx/sites-enabled/default'}
  - { src: 'virtualhost-ssl.j2', dest: '/etc/nginx/sites-enabled/default-ssl'}
  - { src: 'naxsi_core_default.rules.j2', dest: '/etc/nginx/naxsi_core_default.rules'}
  - { src: 'proxy.conf.j2', dest: '/etc/nginx/proxy.conf'}
  - { src: 'fastcgi.conf.j2', dest: '/etc/nginx/fastcgi.conf'}
  notify: nginx restart
  tags:
    - nginx-config

- name: Nginx Service for ubuntu
  template: src=nginx.service.j2 dest=/etc/systemd/system/nginx.service backup=yes
  when: ansible_distribution == "Ubuntu"

- name: Nginx Service for centos
  template: src=nginx.service.j2 dest=/usr/lib/systemd/system/nginx.service backup=yes
  when: ansible_distribution == "CentOS"

- name: Adding nginx on start up
  systemd: name=nginx state=started enabled=yes

- name: Adding nginx on start up
  service: name=nginx state=started enabled=yes

- name: Clean up
  file: path='{{item}}' state=absent
  with_items:
  - '{{pl_nginx_directory}}/nginx-{{pl_nginx_version}}.tar.gz'
  - '{{pl_nginx_directory}}/pcre-{{pl_pcre_version}}.tar.gz'
  - '{{pl_nginx_directory}}/zlib-{{pl_zlib_version}}.tar.gz'
  - '{{pl_nginx_directory}}/openssl-{{pl_openssl_version}}.tar.gz'
  - '{{pl_naxsi_directory}}/naxsi-{{pl_naxsi_version}}.zip'
  - '{{pl_nginx_directory}}/nginx-{{pl_nginx_version}}'
  - '{{pl_nginx_directory}}/pcre-{{pl_pcre_version}}'
  - '{{pl_nginx_directory}}/zlib-{{pl_zlib_version}}'
  - '{{pl_nginx_directory}}/openssl-{{pl_openssl_version}}'
  - '{{pl_naxsi_directory}}/naxsi-{{pl_naxsi_version}}'
